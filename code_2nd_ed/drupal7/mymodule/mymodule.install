<?php

/**
 * @file
 * Install hooks for sample module.
 */

/**
 * Implements hook_enable().
 *
 * From "Internationalizing User-Entered Text in Drupal 7", Chapter 2:
 * creates a taxonomy vocabulary, for use in storing configuration.
 */
function mymodule_enable() {
  // Create the vocabulary if it doesn't already exist.
  $vocabulary = taxonomy_vocabulary_load(variable_get('mymodule_vocabulary', 0));
  if (!$vocabulary) {
    $vocabulary = (object) array(
      'name' => t('Some appropriate name'),
      'machine_name' => 'mymodule_appropriate_name',
      'description' => t('Some appropriate description'),
      'module' => 'mymodule',
    );
    taxonomy_vocabulary_save($vocabulary);
    variable_set('mymodule_vocabulary', $vocabulary->vid);
  }
}

/**
 * Implements hook_schema().
 *
 * 'mymodule_foo' table is from "Setting up Database Tables", Chapter 2.
 *
 * 'mymodule_myentity' table is from "Defining an Entity Type in Drupal 7",
 * chapter 4.
 */
function mymodule_schema() {
  $schema = array();

  // Define a simple table.
  $schema['mymodule_foo'] = array(
    'description' => 'Untranslated description of this table',
    'fields' => array(
      'bar' => array(
        'description' => 'Untranslated description of this field',
        'type' => 'varchar',
        'length' => 50,
        'default' => '',
      ),
      'baz' => array(
        'description' => 'Untranslated description of this field',
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('baz'),
  );

  // Define a table for entity storage.
  $schema['mymodule_myentity'] = array(
    'description' => 'Storage for myentity entity: settings for mymodule',
    'fields' => array(
     'myentity_id' => array(
        'description' => 'Primary key: settings ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'Label assigned to this set of settings',
        'type' => 'varchar',
        'length' => 200,
        'default' => '',
      ),
      'language' => array(
        'description' => 'Language of this set of settings',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      // Consider adding additional fields for time created, time updated.
    ),

    'primary key' => array('myentity_id'),

    'indexes' => array(
      'language' => array('language'),
      // Add indexes for created/updated here too.
    ),
  );

  return $schema;
}

/**
 * Make one field wider and add a new field in the mymodule_foo table.
 *
 * From Setting up Database Tables section in Chapter 2.
 *
 * Note: If you actually want to run this update, change the function name
 * to remove the "not_", and then visit example.com/update.php.
 */
function not_mymodule_update_7001() {
  db_change_field('mymodule_foo', 'bar', 'bar', array(
    'description' => 'Untranslated description of this field',
    'type' => 'varchar',
    'length' => 150,
    'default' => '',
  ));
  db_add_field('mymodule_foo', 'bay', array(
    'description' => 'Untranslated description of this field',
    'type' => 'varchar',
    'length' => 50,
    'default' => '',
  ));
}

/**
 * Implements hook_install().
 *
 * From "Defining an Entity Type in Drupal 7", chapter 4. Adds two fields to
 * this internal-use entity type.
 */
function mymodule_install() {
  // Create a plain text field for a setting.
  $field = field_create_field(array(
    'field_name' => 'myentity_setting_1',
    'type' => 'text',
    'entity_types' => array('myentity'),
    'locked' => TRUE,
    'translatable' => TRUE,
  ));

  // Attach the field to the entity bundle.
  $instance = field_create_instance(array(
    'field_name' => 'myentity_setting_1',
    'entity_type' => 'myentity',
    'bundle' => 'myentity',
    'label' => t('Setting 1'),
    'description' => t('Help for this setting'),
    'required' => TRUE,
    'widget' => array(
      'type' => 'text_textfield',
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
      ),
    ),
  ));

  // Repeat these two function calls for each additional field.
}
